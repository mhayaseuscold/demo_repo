USE SCHEMA TRANSFORM;

CREATE OR REPLACE PROCEDURE "SP_BACKUP_HSLOCA_HOURLY_LOAD"("DL_FILE_NAME" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

// Truncate staging table

snowflake.execute ({sqlText:
`
TRUNCATE TABLE CDW.STAGING.HSLOCA_STG;
`
})

// Load staging atble

snowflake.execute ({sqlText:
`
COPY INTO STAGING.HSLOCA_STG FROM(
SELECT
	$1:HLPNT,
	$1:HLCUS,
	$1:HLLOT,
	$1:HLLTX,
	$1:HLLOC,
	$1:HLQTY,
	$1:HLLIC,
	$1:HLPID,
	$1:HLREF,
	$1:HLTQL,
	$1:HLSTS,
	$1:HLTIME,
	$1:HLMDTE,
	$1:HLMPGM,
	$1:SOURCEDBMS,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
    $1:RRN,
	NULL,
	NULL,
	NULL,
	NULL,
	$1:DL_INS_DT,
	$1:DL_INS_USR,
	convert_timezone(''America/Los_Angeles'', ''America/New_York'', current_timestamp::timestamp_ntz),
	NULL,
	''ADF_USER'',
	NULL,
	''WMS''
FROM @STAGING.sf_dl_wms_parquet_stage/HSLOCA/`+ DL_FILE_NAME +`);
`
})

// Load fact atble

snowflake.execute ({sqlText:
`
MERGE INTO TRANSFORM.FACT_LOCATION_HISTORY TGT
USING
(
SELECT
    A.HLPNT,
	A.HLCUS,
	A.HLLOT,
	A.HLLTX,
	A.HLLOC,
	A.HLQTY,
	A.HLLIC,
	A.HLPID,
	A.HLREF,
	A.HLTQL,
	A.HLSTS,
	A.HLTIME,
	A.HLMDTE,
	A.HLMPGM,
	TRY_TO_TIMESTAMP(''20''||SUBSTRING(LPAD(A.HLMDTE,6,0),1,2)||''-''||SUBSTRING(LPAD(A.HLMDTE,6,0),3,2)||''-''||SUBSTRING(LPAD(A.HLMDTE,6,0),5,2)
	||'' ''||SUBSTRING(LPAD(A.HLTIME,6,0),1,2)||'':''||SUBSTRING(LPAD(A.HLTIME,6,0),3,2)||'':''||SUBSTRING(LPAD(A.HLTIME,6,0),5,2))  AS LAST_MAINTENANCE_DATETIME,
	A.DTL__CAPXRRN,
	A.SOURCEDBMS,
	A.SOURCE_SYSTEM,
	A.CDC_INS_DT,
	A.CDC_INS_USR,
	A.CDC_UPD_DT,
	A.CDC_UPD_USR,
	A.DL_INS_DT,
	A.DL_INS_USR
FROM
	STAGING.HSLOCA_STG A
ORDER BY A.SOURCEDBMS,A.HLPNT,A.HLCUS,A.HLLOT,A.HLLTX,A.HLLOC,A.HLLIC
) STG
             ON TGT.PLANT_ID = STG.HLPNT
			AND TGT.CUSTOMER_ID = STG.HLCUS
			AND TGT.LOT_ID = STG.HLLOT
			AND TGT.EXTENDED_LOT_ID = STG.HLLTX
			AND TGT.LOCATION_ID = STG.HLLOC
			AND TGT.LICENSE_ID = STG.HLLIC
            AND TGT.RRN = STG.DTL__CAPXRRN
			AND TGT.SOURCEDBMS = STG.SOURCEDBMS
WHEN MATCHED THEN
UPDATE
SET
	TGT.PLANT_ID = STG.HLPNT,
	TGT.CUSTOMER_ID = STG.HLCUS,
	TGT.LOT_ID = STG.HLLOT,
	TGT.EXTENDED_LOT_ID = STG.HLLTX,
	TGT.LOCATION_ID = STG.HLLOC,
	TGT.LOCATION_QUANTITY = STG.HLQTY,
	TGT.LICENSE_ID = STG.HLLIC,
	TGT.PALLET_ID = STG.HLPID,
	TGT.REFERENCE_ID = STG.HLREF,
	TGT.QUALIFIER = STG.HLTQL,
	TGT.STATUS_FLAG = STG.HLSTS,
	TGT.LAST_MAINTENANCE_TIME = STG.HLTIME,
	TGT.LAST_MATINENANCE_DATE = STG.HLMDTE,
	TGT.LAST_MAINTENANCE_PROGRAM = STG.HLMPGM,
	TGT.LAST_MAINTENANCE_DATETIME =	STG.LAST_MAINTENANCE_DATETIME,
	TGT.RRN = STG.DTL__CAPXRRN,
	TGT.SOURCEDBMS = STG.SOURCEDBMS,
	TGT.SOURCE_SYSTEM =	STG.SOURCE_SYSTEM,
	TGT.CDC_INS_DT = STG.CDC_INS_DT,
	TGT.CDC_INS_USR = STG.CDC_INS_USR,
	TGT.CDC_UPD_DT = STG.CDC_UPD_DT,
	TGT.CDC_UPD_USR = STG.CDC_UPD_USR,
	TGT.DL_INS_DT =	STG.DL_INS_DT,
	TGT.DL_INS_USR = STG.DL_INS_USR,
	TGT.CDW_UPD_DT = CONVERT_TIMEZONE(''America/Los_Angeles'', ''America/New_York'', CURRENT_TIMESTAMP::TIMESTAMP_NTZ),
	TGT.CDW_UPD_USR = ''ADF_USER''				
WHEN NOT MATCHED THEN
INSERT
(
	PLANT_ID,
    CUSTOMER_ID,
    LOT_ID,
    EXTENDED_LOT_ID,
    LOCATION_ID,
    LOCATION_QUANTITY,
    LICENSE_ID,
    PALLET_ID,
    REFERENCE_ID,
    QUALIFIER,
    STATUS_FLAG,
	LAST_MAINTENANCE_TIME,
	LAST_MATINENANCE_DATE,
	LAST_MAINTENANCE_PROGRAM,
	LAST_MAINTENANCE_DATETIME,
	RRN,
	SOURCEDBMS,
	SOURCE_SYSTEM,
	CDC_INS_DT,
	CDC_INS_USR,
	CDC_UPD_DT,
	CDC_UPD_USR,
	DL_INS_DT,
	DL_INS_USR,
	CDW_INS_DT,
    CDW_INS_USR,
    CDW_UPD_DT,
    CDW_UPD_USR
	
)
VALUES
(
	STG.HLPNT,
	STG.HLCUS,
	STG.HLLOT,
	STG.HLLTX,
	STG.HLLOC,
	STG.HLQTY,
	STG.HLLIC,
	STG.HLPID,
	STG.HLREF,
	STG.HLTQL,
	STG.HLSTS,
	STG.HLTIME,
	STG.HLMDTE,
	STG.HLMPGM,
	STG.LAST_MAINTENANCE_DATETIME,
	STG.DTL__CAPXRRN,
	STG.SOURCEDBMS,
	STG.SOURCE_SYSTEM,
	STG.CDC_INS_DT,
	STG.CDC_INS_USR,
	STG.CDC_UPD_DT,
	STG.CDC_UPD_USR,
	STG.DL_INS_DT,
	STG.DL_INS_USR,
	CONVERT_TIMEZONE(''America/Los_Angeles'', ''America/New_York'', CURRENT_TIMESTAMP::TIMESTAMP_NTZ),
	''ADF_USER'',
	NULL,	
	NULL	
);
`
})
return ''Table loaded'';
';
